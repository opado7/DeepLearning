{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyOxlXVn5vW218GFCtzrPouL"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["### 생성 모델이란\n","- 생성 모델은 주어진 데이터를 학습하여 데이터 분포를 따르는 유사한 데이터를 생성하는 모델\n","\n","### 생성 모델의 유형\n","- 모델의 확률 변수를 구하는 '변형 오토인코더 모델'\n","- 확률변수를 이용하지 않는 'GAN 모델'"],"metadata":{"id":"OxJ6dZgFoeNy"}},{"cell_type":"markdown","source":["### 적대적 생성 신경망(GAN)\n","- 처음 적대적 생성 신경망을 제안한 이안 굿펠로우는 GAN을 결찰과 위조지폐범 사이에 비유\n","- 위조지폐범은 진짜와 같은 지폐를 만들고, 경찰은 이를 구분해야함 -> 경쟁이 계속되면 어느순간 위조지폐와 실제 화폐를 구분할 수 없는 상태에 이르게 됨\n","- 생성 모델은 최대한 진짜와 비슷한 데이터를 생성하려는 **생성자**와 진짜와 가짜를 구별하는 **판별자**가 각각 존재하여 서로 적대적으로 학습\n","- 적대적 학습에서는 판별자를 먼저 학습시킨 후 생성자를 학습시키는 과정을 반복\n","- 판별자 학습은 크게 두 단계로 진행\n","  1. 먼저 실제 이미지를 입력해서 네트워크(신경망)가 해당 이미지를 진짜로 분류하도록 학습\n","  2. 그런 다음 생성자가 생성한 모조 이미지를 입력해서 해당 이미지를 가짜로 분류하도록 학습\n","  3. 이 과정을 거쳐 판별자는 실제 이미지를 진짜로 분류하고, 모조 이미지를 가짜로 분류\n","\n","- 생성자는 분류에 성공할 확률을 낮추고 판별자는 분류에 성공할 확률을 높이면서 서로 경쟁적으로 발전"],"metadata":{"id":"IusnUGDNpLih"}},{"cell_type":"markdown","source":["### GAN 손실 함수\n","$$min(G)max(D)V(D,G) = E_{x\\text{~}Pdata(x)[\\log D(x)]+E_{z\\text{~}Pz}(z)[\\log(1-D(G(z)))]}$$\n","\n","- $x\\text{~}P_{data}(x)$: 실제 데이터에 대한 확률 분포에서 샘플링한 데이터\n","\n","- $z\\text{~}P_z(z)$: 실제 데이터에 대한 확률 분포에서 샘플링한 데이터\n","- $D(x)$: 판별자 $D(x)$가 1에 가까우면 진짜 데이터로 0에 가까우면 가짜 데이터로 판단, 0이면 가짜를 의미\n","- $D(G(z))$: 생성자 G가 생성한 이미지인 $G(z)$가 1에 가까우면 진짜 데이터로, 0에 가까우면 가짜 데이터로 판단"],"metadata":{"id":"qrUqPUAUq5V1"}},{"cell_type":"markdown","source":["### 동작 원리\n","- 생성자 G는 다음 식의 최솟값으로 파라미터를 업데이트하는 것을 목표로 함\n","$$min(G)\\log(1-D(G(z)))$$\n","- 판별자의 파라미터를 업데이트할 때는 생성자의 파라미터를 고정시키고, 생성자의 파라미터를 업데이트할 때는 판별자의 파라미터를 고정"],"metadata":{"id":"_yonk9GPsRkp"}},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ucq5uUfomyq6","executionInfo":{"status":"ok","timestamp":1744005880110,"user_tz":-540,"elapsed":4,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}},"outputId":"ca7b3df6-118b-4851-eb2d-20a3d918b9fa"},"outputs":[{"output_type":"stream","name":"stdout","text":["cuda:0\n"]}],"source":["import math\n","import torch\n","import matplotlib.pyplot as plt\n","import numpy as np\n","import pandas as pd\n","import torch.nn as nn\n","import torch.optim as optim\n","\n","import torch.optim as optim\n","import torchvision\n","import torchvision.transforms as transforms\n","from torch.utils.data import TensorDataset, DataLoader\n","import torchvision.datasets as datasets\n","\n","device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"]},{"cell_type":"code","source":["transform = transforms.Compose([\n","    transforms.ToTensor(),\n","    transforms.Normalize(0.5, 0.5)\n","])\n","\n","train_dataset = datasets.MNIST(\n","    root = \"./data\", train = True, download = True, transform = transform\n",")\n","\n","batch_size = 512\n","\n","train_loader = DataLoader(\n","    train_dataset, batch_size = batch_size, shuffle = True\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t6VBPKc2tuSg","executionInfo":{"status":"ok","timestamp":1744005884919,"user_tz":-540,"elapsed":3886,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}},"outputId":"7492df50-bd2a-4ce1-c22b-045bb22462fd"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 9.91M/9.91M [00:00<00:00, 17.7MB/s]\n","100%|██████████| 28.9k/28.9k [00:00<00:00, 484kB/s]\n","100%|██████████| 1.65M/1.65M [00:00<00:00, 4.43MB/s]\n","100%|██████████| 4.54k/4.54k [00:00<00:00, 9.84MB/s]\n"]}]},{"cell_type":"code","source":["nz = 128 # 잠재 벡터의 크기를 의미\n","\n","class Generator(nn.Module):\n","    def __init__(self, nz):\n","        super(Generator, self).__init__()\n","        self.nz = nz\n","        self.main = nn.Sequential(\n","            nn.Linear(self.nz, 256),\n","            nn.LeakyReLU(0.2),\n","            nn.Linear(256, 512),\n","            nn.LeakyReLU(0.2),\n","            nn.Linear(512, 1024),\n","            nn.LeakyReLU(0.2),\n","            nn.Linear(1024, 784),\n","            nn.Tanh()\n","        )\n","    def forward(self, x):\n","        # 생성자 네트워크의 반환값은 배치크기 * 1 * 28 * 28(MNIST 크기)\n","        return self.main(x).view(-1, 1, 28, 28)\n","# 판별자 네트워크\n","class Discriminator(nn.Module):\n","    def __init__(self):\n","        super(Discriminator, self).__init__()\n","        self.n_input = 784\n","        self.main = nn.Sequential(\n","        nn.Linear(self.n_input, 1024),\n","            nn.LeakyReLU(0.2),\n","            nn.Dropout(0.3),\n","            nn.Linear(1024, 512),\n","            nn.LeakyReLU(0.2),\n","            nn.Dropout(0.3),\n","            nn.Linear(512, 256),\n","            nn.LeakyReLU(0.2),\n","            nn.Dropout(0.3),\n","            # 진짜, 가짜 따로 학습함으로 1개의 값으로 출력\n","            nn.Linear(256, 1),\n","            # 이미지가 진짜인지 가짜인지 0과 1사이의 값으로 반환\n","            nn.Sigmoid()\n","        )\n","    def forward(self, x):\n","        x = x.view(-1, 784)\n","        return self.main(x)"],"metadata":{"id":"kwZztPKI2jm7","executionInfo":{"status":"ok","timestamp":1744005918512,"user_tz":-540,"elapsed":3,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["generator = Generator(nz).to(device)\n","discriminator = Discriminator().to(device)\n","print(generator)\n","print(discriminator)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U6rR3aXR2rOD","executionInfo":{"status":"ok","timestamp":1744005943424,"user_tz":-540,"elapsed":286,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}},"outputId":"f510508d-17d1-4eba-c5c8-0a29ab0a39dc"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Generator(\n","  (main): Sequential(\n","    (0): Linear(in_features=128, out_features=256, bias=True)\n","    (1): LeakyReLU(negative_slope=0.2)\n","    (2): Linear(in_features=256, out_features=512, bias=True)\n","    (3): LeakyReLU(negative_slope=0.2)\n","    (4): Linear(in_features=512, out_features=1024, bias=True)\n","    (5): LeakyReLU(negative_slope=0.2)\n","    (6): Linear(in_features=1024, out_features=784, bias=True)\n","    (7): Tanh()\n","  )\n",")\n","Discriminator(\n","  (main): Sequential(\n","    (0): Linear(in_features=784, out_features=1024, bias=True)\n","    (1): LeakyReLU(negative_slope=0.2)\n","    (2): Dropout(p=0.3, inplace=False)\n","    (3): Linear(in_features=1024, out_features=512, bias=True)\n","    (4): LeakyReLU(negative_slope=0.2)\n","    (5): Dropout(p=0.3, inplace=False)\n","    (6): Linear(in_features=512, out_features=256, bias=True)\n","    (7): LeakyReLU(negative_slope=0.2)\n","    (8): Dropout(p=0.3, inplace=False)\n","    (9): Linear(in_features=256, out_features=1, bias=True)\n","    (10): Sigmoid()\n","  )\n",")\n"]}]},{"cell_type":"code","source":["optim_g = optim.Adam(generator.parameters(), lr=0.0002)\n","optim_d = optim.Adam(discriminator.parameters(), lr=0.0002)\n","\n","criterion = nn.BCELoss()\n","\n","losses_g = [] # 생성자 오차 저장\n","losses_d = [] # 판별자 오차 저장\n","images = []"],"metadata":{"id":"9DaZ7gqm2upQ","executionInfo":{"status":"ok","timestamp":1744005951592,"user_tz":-540,"elapsed":2,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["def train_discriminator(optimizer, data_real, data_fake):\n","    b_size = data_real.size(0)\n","    real_label = torch.ones(b_size, 1).to(device)\n","    fake_label = torch.zeros(b_size, 1).to(device)\n","    optimizer.zero_grad()\n","    output_real = discriminator(data_real)\n","    loss_real = criterion(output_real, real_label)\n","    output_fake = discriminator(data_fake)\n","    loss_fake = criterion(output_fake, fake_label)\n","    loss_total = (loss_real + loss_fake)/2\n","    loss_total.backward()\n","    optimizer.step()\n","    return loss_total\n","\n","def train_generator(optimizer, data_fake):\n","    b_size = data_fake.size(0)\n","    real_label = torch.ones(b_size, 1).to(device)\n","    optimizer.zero_grad()\n","    output = discriminator(data_fake)\n","    loss = criterion(output, real_label)\n","    loss.backward()\n","    optimizer.step()\n","    return loss"],"metadata":{"id":"cJ9KD9r12vU2","executionInfo":{"status":"ok","timestamp":1744005997603,"user_tz":-540,"elapsed":1121,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","source":["epochs = 500\n","for epoch in range(epochs):\n","    loss_g = 0.0\n","    loss_d = 0.0\n","    for idx, data in enumerate(train_loader):\n","        image,_ = data\n","        data_real = image.to(device)\n","        b_size = len(data_real)\n","\n","        data_fake = generator(torch.randn(b_size, nz).to(device))\n","        loss_d += train_discriminator(optim_d, data_real, data_fake)\n","\n","        data_fake = generator(torch.randn(b_size, nz).to(device))\n","        loss_g += train_generator(optim_g, data_fake)\n","\n","    epoch_loss_g = loss_g / idx\n","    epoch_loss_d = loss_d / idx\n","    losses_g.append(epoch_loss_g)\n","    losses_d.append(epoch_loss_d)\n","\n","    if epoch%20==0:\n","        print(f\"Epoch {epoch} of {epochs}\")\n","        print(f\"Generator loss:{epoch_loss_g:.8f}, Discriminator loss: {epoch_loss_d:.8f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"3g6WpJKx26nr","executionInfo":{"status":"error","timestamp":1744011241267,"user_tz":-540,"elapsed":5216527,"user":{"displayName":"이봉규 (opado)","userId":"06890509259234494548"}},"outputId":"7b8eea60-77ee-4e2f-9a7d-34f9bfe2a427"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 0 of 500\n","Generator loss:1.62536585, Discriminator loss: 0.41064382\n","Epoch 20 of 500\n","Generator loss:2.35188365, Discriminator loss: 0.29313123\n","Epoch 40 of 500\n","Generator loss:3.11499071, Discriminator loss: 0.25990701\n","Epoch 60 of 500\n","Generator loss:2.67756391, Discriminator loss: 0.29297230\n","Epoch 80 of 500\n","Generator loss:2.40798759, Discriminator loss: 0.32917187\n","Epoch 100 of 500\n","Generator loss:1.94949079, Discriminator loss: 0.39818421\n","Epoch 120 of 500\n","Generator loss:1.65949464, Discriminator loss: 0.44891554\n","Epoch 140 of 500\n","Generator loss:1.52704668, Discriminator loss: 0.48182020\n","Epoch 160 of 500\n","Generator loss:1.44951093, Discriminator loss: 0.50621432\n","Epoch 180 of 500\n","Generator loss:1.35452008, Discriminator loss: 0.52693468\n","Epoch 200 of 500\n","Generator loss:1.25646198, Discriminator loss: 0.54758358\n","Epoch 220 of 500\n","Generator loss:1.20583618, Discriminator loss: 0.55948180\n","Epoch 240 of 500\n","Generator loss:1.16677821, Discriminator loss: 0.56715989\n","Epoch 260 of 500\n","Generator loss:1.20103669, Discriminator loss: 0.57006466\n","Epoch 280 of 500\n","Generator loss:1.09425807, Discriminator loss: 0.58517349\n","Epoch 300 of 500\n","Generator loss:1.09436798, Discriminator loss: 0.58671552\n","Epoch 320 of 500\n","Generator loss:1.10236061, Discriminator loss: 0.60263973\n","Epoch 340 of 500\n","Generator loss:1.01603734, Discriminator loss: 0.61402559\n","Epoch 360 of 500\n","Generator loss:1.03936028, Discriminator loss: 0.59843284\n","Epoch 380 of 500\n","Generator loss:1.01453304, Discriminator loss: 0.61377692\n","Epoch 400 of 500\n","Generator loss:1.01689935, Discriminator loss: 0.60817850\n","Epoch 420 of 500\n","Generator loss:1.00435257, Discriminator loss: 0.61179668\n"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-9-6ccc301c51d7>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mloss_g\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0mloss_d\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;32min\u001b[0m \u001b[0menumerate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_loader\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m         \u001b[0mdata_real\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdevice\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m__next__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    706\u001b[0m                 \u001b[0;31m# TODO(https://github.com/pytorch/pytorch/issues/76750)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    707\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: ignore[call-arg]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 708\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    709\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_num_yielded\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    710\u001b[0m             if (\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/dataloader.py\u001b[0m in \u001b[0;36m_next_data\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    762\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_next_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    763\u001b[0m         \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_next_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 764\u001b[0;31m         \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dataset_fetcher\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfetch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# may raise StopIteration\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    765\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    766\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_utils\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpin_memory\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_pin_memory_device\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36mfetch\u001b[0;34m(self, possibly_batched_index)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torch/utils/data/_utils/fetch.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     50\u001b[0m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getitems__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     51\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 52\u001b[0;31m                 \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0midx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     53\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     54\u001b[0m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdataset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mpossibly_batched_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torchvision/datasets/mnist.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, index)\u001b[0m\n\u001b[1;32m    144\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    145\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 146\u001b[0;31m             \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransform\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    148\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtarget_transform\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/torchvision/transforms/transforms.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, img)\u001b[0m\n\u001b[1;32m     93\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     94\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mt\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtransforms\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 95\u001b[0;31m             \u001b[0mimg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     96\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mimg\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     97\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}